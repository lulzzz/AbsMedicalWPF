//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AbsMedical.DoctorServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DoctorServiceReference.IDoctorService")]
    public interface IDoctorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/GetDoctor", ReplyAction="http://tempuri.org/IDoctorService/GetDoctorResponse")]
        AbsMedical.WCF.Doctor GetDoctor(string doctorGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/GetDoctor", ReplyAction="http://tempuri.org/IDoctorService/GetDoctorResponse")]
        System.Threading.Tasks.Task<AbsMedical.WCF.Doctor> GetDoctorAsync(string doctorGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/Find", ReplyAction="http://tempuri.org/IDoctorService/FindResponse")]
        AbsMedical.WCF.Doctor Find(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/Find", ReplyAction="http://tempuri.org/IDoctorService/FindResponse")]
        System.Threading.Tasks.Task<AbsMedical.WCF.Doctor> FindAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/UpdateDoctor", ReplyAction="http://tempuri.org/IDoctorService/UpdateDoctorResponse")]
        bool UpdateDoctor(AbsMedical.WCF.Doctor doctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/UpdateDoctor", ReplyAction="http://tempuri.org/IDoctorService/UpdateDoctorResponse")]
        System.Threading.Tasks.Task<bool> UpdateDoctorAsync(AbsMedical.WCF.Doctor doctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/UpdatePassword", ReplyAction="http://tempuri.org/IDoctorService/UpdatePasswordResponse")]
        bool UpdatePassword(string doctorGuid, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/UpdatePassword", ReplyAction="http://tempuri.org/IDoctorService/UpdatePasswordResponse")]
        System.Threading.Tasks.Task<bool> UpdatePasswordAsync(string doctorGuid, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/CreateDoctor", ReplyAction="http://tempuri.org/IDoctorService/CreateDoctorResponse")]
        bool CreateDoctor(AbsMedical.WCF.Doctor doctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/CreateDoctor", ReplyAction="http://tempuri.org/IDoctorService/CreateDoctorResponse")]
        System.Threading.Tasks.Task<bool> CreateDoctorAsync(AbsMedical.WCF.Doctor doctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/RegisterMailConfiguration", ReplyAction="http://tempuri.org/IDoctorService/RegisterMailConfigurationResponse")]
        bool RegisterMailConfiguration(AbsMedical.WCF.MailConfiguration conf, AbsMedical.WCF.Doctor doctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/RegisterMailConfiguration", ReplyAction="http://tempuri.org/IDoctorService/RegisterMailConfigurationResponse")]
        System.Threading.Tasks.Task<bool> RegisterMailConfigurationAsync(AbsMedical.WCF.MailConfiguration conf, AbsMedical.WCF.Doctor doctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/GetMailConfiguration", ReplyAction="http://tempuri.org/IDoctorService/GetMailConfigurationResponse")]
        AbsMedical.WCF.MailConfiguration GetMailConfiguration(string confGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/GetMailConfiguration", ReplyAction="http://tempuri.org/IDoctorService/GetMailConfigurationResponse")]
        System.Threading.Tasks.Task<AbsMedical.WCF.MailConfiguration> GetMailConfigurationAsync(string confGuid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDoctorServiceChannel : AbsMedical.DoctorServiceReference.IDoctorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoctorServiceClient : System.ServiceModel.ClientBase<AbsMedical.DoctorServiceReference.IDoctorService>, AbsMedical.DoctorServiceReference.IDoctorService {
        
        public DoctorServiceClient() {
        }
        
        public DoctorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DoctorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DoctorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DoctorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AbsMedical.WCF.Doctor GetDoctor(string doctorGuid) {
            return base.Channel.GetDoctor(doctorGuid);
        }
        
        public System.Threading.Tasks.Task<AbsMedical.WCF.Doctor> GetDoctorAsync(string doctorGuid) {
            return base.Channel.GetDoctorAsync(doctorGuid);
        }
        
        public AbsMedical.WCF.Doctor Find(string email, string password) {
            return base.Channel.Find(email, password);
        }
        
        public System.Threading.Tasks.Task<AbsMedical.WCF.Doctor> FindAsync(string email, string password) {
            return base.Channel.FindAsync(email, password);
        }
        
        public bool UpdateDoctor(AbsMedical.WCF.Doctor doctor) {
            return base.Channel.UpdateDoctor(doctor);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateDoctorAsync(AbsMedical.WCF.Doctor doctor) {
            return base.Channel.UpdateDoctorAsync(doctor);
        }
        
        public bool UpdatePassword(string doctorGuid, string newPassword) {
            return base.Channel.UpdatePassword(doctorGuid, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePasswordAsync(string doctorGuid, string newPassword) {
            return base.Channel.UpdatePasswordAsync(doctorGuid, newPassword);
        }
        
        public bool CreateDoctor(AbsMedical.WCF.Doctor doctor) {
            return base.Channel.CreateDoctor(doctor);
        }
        
        public System.Threading.Tasks.Task<bool> CreateDoctorAsync(AbsMedical.WCF.Doctor doctor) {
            return base.Channel.CreateDoctorAsync(doctor);
        }
        
        public bool RegisterMailConfiguration(AbsMedical.WCF.MailConfiguration conf, AbsMedical.WCF.Doctor doctor) {
            return base.Channel.RegisterMailConfiguration(conf, doctor);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterMailConfigurationAsync(AbsMedical.WCF.MailConfiguration conf, AbsMedical.WCF.Doctor doctor) {
            return base.Channel.RegisterMailConfigurationAsync(conf, doctor);
        }
        
        public AbsMedical.WCF.MailConfiguration GetMailConfiguration(string confGuid) {
            return base.Channel.GetMailConfiguration(confGuid);
        }
        
        public System.Threading.Tasks.Task<AbsMedical.WCF.MailConfiguration> GetMailConfigurationAsync(string confGuid) {
            return base.Channel.GetMailConfigurationAsync(confGuid);
        }
    }
}
